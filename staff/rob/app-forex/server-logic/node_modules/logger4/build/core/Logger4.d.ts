import { Listener } from '../modules/Listener';
export interface Logger4Interface {
    path: string | null;
    debug: (log: string, ...params: any[]) => void;
    info: (log: string, ...params: any[]) => void;
    hidden: (log: string, tag?: string, type?: string, ...params: any[]) => void;
    error: (log: string, ...params: any[]) => void;
    warn: (log: string, ...params: any[]) => void;
    success: (log: string, ...params: any[]) => void;
    onError: (callback: (log: string, ...params: any[]) => void) => void;
    onSuccess: (callback: (log: string, ...params: any[]) => void) => void;
    onInfo: (callback: (log: string, ...params: any[]) => void) => void;
    onDebug: (callback: (log: string, ...params: any[]) => void) => void;
    onTag: (tag: string, callback: (log: string, type: string | null, ...params: any[]) => void) => void;
    on: (callback: (tag: string, log: string, type: string | null, ...params: any[]) => void) => void;
}
export declare class Logger4 extends Listener implements Logger4Interface {
    private _path;
    private _target;
    private _types;
    private _directorySizeLimitMB;
    private _timeout;
    private _printEnabled;
    get path(): string | null;
    constructor({ printEnabled, path, directorySizeLimitMB }: {
        printEnabled: boolean;
        path: string | null;
        directorySizeLimitMB: number | null;
    });
    private addType;
    private getTimestamp;
    private checkLogDirectorySize;
    onDeleteLog(callback: (file: string) => {
        enabled: boolean;
    }): void;
    private getFileName;
    private checkLogFiles;
    private beat;
    private callBeat;
    private createNewFileName;
    private save;
    private formatLog;
    private loggerError;
    private print;
    onTag(tag: string, callback: (log: string, type: string | null, ...params: any[]) => void): void;
    on(callback: (tag: string, log: string, type: string | null, ...params: any[]) => void): void;
    onError(callback: (log: string, type: string | null, ...params: any[]) => void): void;
    error(log: string, ...params: any[]): void;
    onWarn(callback: (log: string, type: string | null, ...params: any[]) => void): void;
    warn(log: string, ...params: any[]): void;
    onSuccess(callback: (log: string, type: string | null, ...params: any[]) => void): void;
    success(log: string, ...params: any[]): void;
    onInfo(callback: (log: string, type: string | null, ...params: any[]) => void): void;
    info(log: string, ...params: any[]): void;
    onDebug(callback: (log: string, type: string | null, ...params: any[]) => void): void;
    debug(log: string, ...params: any[]): void;
    hidden(log: string, tag?: string, type?: string | null, ...params: any[]): void;
}
