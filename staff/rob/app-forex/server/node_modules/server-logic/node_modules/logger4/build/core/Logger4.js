"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger4 = void 0;
const fs = require("fs");
const path = require("path");
const readDirectory_1 = require("../utils/readDirectory");
const Utils_1 = require("../utils/Utils");
const Listener_1 = require("../modules/Listener");
class Logger4 extends Listener_1.Listener {
    constructor({ printEnabled = true, path = null, directorySizeLimitMB = null }) {
        super();
        this._target = { '': null };
        this._types = [''];
        this._directorySizeLimitMB = null;
        this._timeout = null;
        this._printEnabled = true;
        this._printEnabled = printEnabled;
        this._path = path;
        this._directorySizeLimitMB = directorySizeLimitMB === null ? null : directorySizeLimitMB * 1000000;
        this.createNewFileName('');
        this.callBeat();
        if (this._path !== null) {
            if (fs.existsSync(this._path)) {
                this.checkLogDirectorySize();
            }
            else {
                this.loggerError(this._path + ' directory is not exits (need for LoggerId)');
            }
        }
    }
    get path() {
        return this._path;
    }
    addType(type) {
        if (this._types.includes(type) === false) {
            this._types.push(type);
        }
    }
    getTimestamp(filename) {
        const date = filename.split('.')[0].split('_')[0].split('-');
        if (date.length === 6) {
            const numbers = date.map(e => parseInt(e, 10));
            return Date.parse(`${numbers[0]}-${numbers[1]}-${numbers[2]} ${numbers[3]}:${numbers[4]}:${numbers[5]}`);
        }
        else {
            return null;
        }
    }
    checkLogDirectorySize() {
        if (this._path === null) {
            return;
        }
        const files = readDirectory_1.readDirectory(this._path);
        if (files === null) {
            return;
        }
        const directorySize = Utils_1.default.sum(files.map(f => f.stats.size));
        if (directorySize > 1000000 * 10000) {
            const sizeInMB = Math.floor(directorySize / 1000000);
            this.warn(`Log directory size is more than ${sizeInMB}MB (${this._path})`);
        }
        if (this._directorySizeLimitMB !== null && directorySize > this._directorySizeLimitMB) {
            const deleteList = [];
            let space = 0;
            const minimumSpace = Math.floor(this._directorySizeLimitMB * 0.01);
            files.sort((a, b) => {
                const a1 = this.getTimestamp(a.name);
                const b1 = this.getTimestamp(b.name);
                if (a1 === null || b1 === null) {
                    return 0;
                }
                return a1 > b1 ? 1 : -1;
            }).some(file => {
                space += file.stats.size;
                deleteList.push(file.name);
                return space > minimumSpace;
            });
            deleteList.forEach(fileName => {
                if (this._path !== null) {
                    const file = path.join(this._path, fileName);
                    if (this.callListener('onDeleteLog', [file]).every(({ enabled }) => enabled !== false)) {
                        fs.unlinkSync(file);
                        this.warn(`Log file deleted (${file})`);
                    }
                }
            });
        }
    }
    onDeleteLog(callback) {
        this.addListener('onDeleteLog', callback);
    }
    getFileName(type) {
        if (type === null || type.length === 0) {
            return this._target[''] + '.txt';
        }
        if (this._target[type] === undefined) {
            this.addType(type);
            this.createNewFileName(type);
        }
        return this._target[type] + '_' + type + '.txt';
    }
    checkLogFiles() {
        if (this._path !== null) {
            this._types.forEach(type => {
                const fName = this.getFileName(type);
                if (fs.existsSync(fName)) {
                    const logFileSize = fs.statSync(fName).size;
                    if (logFileSize >= 2000000) {
                        this.createNewFileName(type);
                    }
                }
            });
        }
    }
    beat() {
        if (this._path !== null) {
            if (fs.existsSync(this._path)) {
                this.checkLogDirectorySize();
                this.checkLogFiles();
            }
            else {
                this.loggerError(this._path + ' directory is not exits (need for Logger4)');
            }
        }
    }
    callBeat() {
        this._timeout = setTimeout(() => {
            this._timeout = null;
            this.beat();
        }, 600000 - (new Date().getTime() + 600000) % 600000 + 1);
    }
    createNewFileName(type) {
        if (this._path !== null) {
            this._target[type] = path.join(this._path, Utils_1.default.getMomentDateTimeStringFile());
        }
    }
    save(tag, dateStr, log, type = null) {
        if (this._path !== null) {
            if (this._timeout === null) {
                this.callBeat();
            }
            try {
                fs.appendFileSync(this.getFileName(type), '\n' + dateStr + ' | ' + tag + ' | ' + log);
            }
            catch (e) {
                this.loggerError(e, false, true);
            }
        }
    }
    formatLog(log, ...params) {
        if (params.length > 0) {
            try {
                log += ' | ' + JSON.stringify(params);
            }
            catch (e) {
                this.loggerError(e.toString(), true);
            }
        }
        if (typeof (log) === 'string') {
            return log.split('\n').map((line, i) => {
                return (i === 0) ? line : '\t\t' + line;
            }).join('\n');
        }
        else {
            return log + '';
        }
    }
    loggerError(error, noFormat = false, noSave = false) {
        const tag = 'ERROR';
        const log = noFormat ? error.toString() : this.formatLog(error);
        const dateStr = Utils_1.default.getMomentDateTimeString();
        if (!noSave) {
            this.save(tag, dateStr, log, null);
        }
        console.error('\x1b[31m' + dateStr + ' | ' + log + '\x1b[0m');
        this.callListener('TAG_' + tag, [log, null]);
        this.callListener('ALLTAG', [tag, log, null]);
    }
    print(log, tag, color, ...params) {
        const dateStr = Utils_1.default.getMomentDateTimeString();
        log = params.length > 0 ? this.formatLog(log, ...params) : this.formatLog(log);
        this.save(tag, dateStr, log, null);
        if (this._printEnabled) {
            if (tag === 'ERROR') {
                console.error(color + dateStr + ' | ' + log + '\x1b[0m');
            }
            else {
                console.log(color + dateStr + ' | ' + log + '\x1b[0m');
            }
        }
        this.callListener('TAG_' + tag, [log, null, ...params]);
        this.callListener('ALLTAG', [tag, log, null, ...params]);
    }
    onTag(tag, callback) {
        this.addListener('TAG_' + tag, callback);
    }
    on(callback) {
        this.addListener('ALLTAG', callback);
    }
    onError(callback) {
        this.onTag('ERROR', callback);
    }
    error(log, ...params) {
        this.print(log, 'ERROR', '\x1b[31m', ...params);
    }
    onWarn(callback) {
        this.onTag('WARN', callback);
    }
    warn(log, ...params) {
        this.print(log, 'WARN', '\x1b[33m', ...params);
    }
    onSuccess(callback) {
        this.onTag('SUCCESS', callback);
    }
    success(log, ...params) {
        this.print(log, 'SUCCESS', '\x1b[32m', ...params);
    }
    onInfo(callback) {
        this.onTag('INFO', callback);
    }
    info(log, ...params) {
        this.print(log, 'INFO', '', ...params);
    }
    onDebug(callback) {
        this.onTag('DEBUG', callback);
    }
    debug(log, ...params) {
        this.save('DEBUG', Utils_1.default.getMomentDateTimeString(), params.length > 0 ? this.formatLog(log, ...params) : this.formatLog(log), null);
        this.callListener('TAG_DEBUG', [log, null, ...params]);
    }
    hidden(log, tag = 'HIDDEN', type = null, ...params) {
        this.save(tag, Utils_1.default.getMomentDateTimeString(), params.length > 0 ? this.formatLog(log, ...params) : this.formatLog(log), type);
        this.callListener('TAG_' + tag, [log, type, ...params]);
        this.callListener('ALLTAG', [tag, log, type, ...params]);
    }
}
exports.Logger4 = Logger4;
//# sourceMappingURL=Logger4.js.map