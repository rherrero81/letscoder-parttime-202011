import { STREAMING_BALANCE_RECORD, STREAMING_CANDLE_RECORD, STREAMING_KEEP_ALIVE_RECORD, STREAMING_NEWS_RECORD, STREAMING_PROFIT_RECORD, STREAMING_TICK_RECORD, STREAMING_TRADE_RECORD, STREAMING_TRADE_STATUS_RECORD, Time } from '../..';
import { StreamConnection } from './StreamConnection';
import { XAPI } from '../XAPI';
interface StreamListen<T> {
    (data: T, time: Time, jsonString: string): void;
}
export declare class Stream extends StreamConnection {
    constructor(XAPI: XAPI);
    listen: {
        getBalance: (callBack: StreamListen<STREAMING_BALANCE_RECORD>, key?: string | null) => import("../..").ListenerChild;
        getCandles: (callBack: StreamListen<STREAMING_CANDLE_RECORD>, key?: string | null) => import("../..").ListenerChild;
        getKeepAlive: (callBack: StreamListen<STREAMING_KEEP_ALIVE_RECORD>, key?: string | null) => import("../..").ListenerChild;
        getNews: (callBack: StreamListen<STREAMING_NEWS_RECORD>, key?: string | null) => import("../..").ListenerChild;
        getProfits: (callBack: StreamListen<STREAMING_PROFIT_RECORD>, key?: string | null) => import("../..").ListenerChild;
        getTickPrices: (callBack: StreamListen<STREAMING_TICK_RECORD>, key?: string | null) => import("../..").ListenerChild;
        getTrades: (callBack: StreamListen<STREAMING_TRADE_RECORD>, key?: string | null) => import("../..").ListenerChild;
        getTradeStatus: (callBack: StreamListen<STREAMING_TRADE_STATUS_RECORD>, key?: string | null) => import("../..").ListenerChild;
    };
    subscribe: {
        getBalance: () => Promise<import("../../interface/Interface").TransactionResolveStream>;
        getCandles: (symbol: string) => Promise<import("../../interface/Interface").TransactionResolveStream>;
        getKeepAlive: () => Promise<import("../../interface/Interface").TransactionResolveStream>;
        getNews: () => Promise<import("../../interface/Interface").TransactionResolveStream>;
        getProfits: () => Promise<import("../../interface/Interface").TransactionResolveStream>;
        getTickPrices: (symbol: string, minArrivalTime?: number, maxLevel?: number) => Promise<import("../../interface/Interface").TransactionResolveStream>;
        getTrades: () => Promise<import("../../interface/Interface").TransactionResolveStream>;
        getTradeStatus: () => Promise<import("../../interface/Interface").TransactionResolveStream>;
    };
    unSubscribe: {
        getBalance: () => Promise<import("../../interface/Interface").TransactionResolveStream>;
        getCandles: (symbol: string) => Promise<import("../../interface/Interface").TransactionResolveStream>;
        getKeepAlive: () => Promise<import("../../interface/Interface").TransactionResolveStream>;
        getNews: () => Promise<import("../../interface/Interface").TransactionResolveStream>;
        getProfits: () => Promise<import("../../interface/Interface").TransactionResolveStream>;
        getTickPrices: (symbol: string) => Promise<import("../../interface/Interface").TransactionResolveStream>;
        getTrades: () => Promise<import("../../interface/Interface").TransactionResolveStream>;
        getTradeStatus: () => Promise<import("../../interface/Interface").TransactionResolveStream>;
    };
}
export {};
